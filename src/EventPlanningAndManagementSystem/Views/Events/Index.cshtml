@model X.PagedList.IPagedList<EventPlanningAndManagementSystem.ViewModels.Event.EventIndexViewModel>
@using X.PagedList.Mvc.Core;
@{
    ViewData["Title"] = "All Events";
}

<div class="container py-4">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-center mb-4 gap-3">
        <h2 class="mb-0">@ViewData["Title"]</h2>
        <form method="get" asp-action="Index" class="d-flex flex-wrap gap-2 align-items-center">
            <input type="text" name="searchTerm" placeholder="Search events..." class="form-control" value="@Context.Request.Query["searchTerm"]" />
            <select name="categoryId" class="form-select">
                <option value="">-- All Categories --</option>
                @foreach (var category in (SelectList)ViewBag.Categories)
                {
                    <option value="@category.Value" selected="@((Context.Request.Query["categoryId"] == category.Value) ? "selected" : null)">@category.Text</option>
                }
            </select>
            <button type="submit" class="btn btn-primary transition-btn">Filter</button>
        </form>
        @if (User?.Identity?.IsAuthenticated == true)
        {
            <div class="d-flex flex-wrap gap-2">
                @if (User.Identity?.IsAuthenticated == true && User.IsInRole("Administrator"))
                {
                    <a asp-action="Create" class="btn btn-success transition-btn"><i class="fas fa-plus"></i> Add Event</a>
                    <a asp-controller="Location" asp-action="Index" class="btn btn-outline-primary transition-btn">Locations</a>
                    <a asp-controller="Categories" asp-action="Index" class="btn btn-outline-primary transition-btn">Categories</a>
                    <a asp-controller="Admin" asp-action="PendingRegistrations" class="btn btn-success transition-btn"><i class="fas fa-plus"></i> Confirm Registrations</a>
                }
                <a asp-controller="Registration" asp-action="Index" class="btn btn-outline-info transition-btn">My Events</a>
            </div>
        }
    </div>
    <hr />
    @if (Model != null && Model.Any())
    {
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">
            @foreach (var ev in Model)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm border-0 event-card transition-card">
                        <img src="@(!string.IsNullOrEmpty(ev.ImageUrl) ? ev.ImageUrl : Url.Content("~/images/default-image.jpg"))"
                             class="card-img-top"
                             alt="@ev.Name"
                             style="height: 180px; object-fit: cover;"
                             onerror="this.onerror=null;this.src='/images/default-image.jpg';" />
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title fw-semibold">@ev.Name</h5>
                            <div class="mb-2">
                                <span class="badge bg-secondary me-1">@ev.CategoryName</span>
                                <span class="badge bg-light text-dark">@ev.PublishedOn.ToShortDateString()</span>
                            </div>
                            <a asp-action="Details" asp-route-id="@ev.Id" class="btn btn-info w-100 mt-auto transition-btn">
                                <i class="fas fa-info-circle"></i> Details
                            </a>
                            @if (User.Identity?.IsAuthenticated == true && User.IsInRole("Administrator"))
                            {
                                <div class="d-flex justify-content-between mt-2">
                                    <a asp-controller="Events" asp-action="Edit" asp-route-id="@ev.Id" class="btn btn-warning btn-sm w-50 me-2">Edit</a>

                                    <form asp-controller="Events" asp-action="Delete" asp-route-id="@ev.Id" method="post" class="w-50">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-danger btn-sm w-100">Delete</button>
                                    </form>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

       <div class="mt-4 d-flex justify-content-center">
    @Html.PagedListPager(Model, page => Url.Action("Index", new {
        page,
        searchTerm = Context.Request.Query["searchTerm"],
        categoryId = Context.Request.Query["categoryId"]
    }), new PagedListRenderOptions
    {
        LiElementClasses = new[] { "page-item" },
        PageClasses = new[] { "page-link" },
        UlElementClasses = new[] { "pagination", "justify-content-center", "flex-wrap" },
        ContainerDivClasses = new[] { "d-inline-block" },
        MaximumPageNumbersToDisplay = 5,
        DisplayLinkToFirstPage = PagedListDisplayMode.Always,
        DisplayLinkToLastPage = PagedListDisplayMode.Always,
        DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
        DisplayLinkToNextPage = PagedListDisplayMode.Always
    })
</div>


    }
    else
    {
        <div class="alert alert-info mt-4">No events found.</div>
    }
</div>

<style>
    .transition-btn {
        transition: background 0.2s, color 0.2s, box-shadow 0.2s;
    }
    .transition-btn:hover, .transition-btn:focus {
        box-shadow: 0 2px 8px rgba(0,0,0,0.07);
        filter: brightness(0.97);
    }
    .transition-card {
        transition: box-shadow 0.2s, transform 0.2s;
    }
    .transition-card:hover {
        box-shadow: 0 4px 24px rgba(0,0,0,0.10);
        transform: translateY(-2px) scale(1.01);
    }
</style>
